import * from Minecraft;
import MaterialUtils from minecraft.MinecraftUtils; 

// Config for selected items
ITEMS_CONFIG = Config.fromMap({
    "type": "list",
    "name": "Enchants To Find",
    "description": "These are the enchants you want to find",
    "default_value": [
        "looting,3,20"
    ],
    "max_length": 64
});
// Config for the lectern coordinates
LECTERN_COORDINATES_CONFIG = Config.fromMap({
    "type": "string",
    "name": "Lectern Coordinates",
    "description": "These are the coordinates of the villager's lectern",
    "default_value": ""
});
// Config for DEFAULT_LEVEL
LEVEL_CONFIG = Config.fromMap({
    "type": "integer",
    "name": "Default Level",
    "description": "Default level used in the add command",
    "default_value": 1
});
// Config for DEFAULT_PRICE
PRICE_CONFIG = Config.fromMap({
    "type": "integer",
    "name": "Default Price",
    "description": "Default price used in the add command",
    "default_value": 64
});
// Config for AXE_SLOT
AXE_SLOT_CONFIG = Config.fromMap({
    "type": "integer",
    "name": "HotbarSlot For Axe",
    "description": "Slot for the axe in the hotbar, between 1 - 9",
    "default_value": 5
});
// Config for LECTERN_SLOT
LECTERN_SLOT_CONFIG = Config.fromMap({
    "type": "integer",
    "name": "HotbarSlot For Lectern",
    "description": "Slot for the lectern in the hotbar, between 1 - 9",
    "default_value": 6
});

configHandler = new ConfigHandler("LecternTradeConfig", false);
configHandler.addConfigs([ITEMS_CONFIG, LECTERN_COORDINATES_CONFIG, LEVEL_CONFIG, PRICE_CONFIG, AXE_SLOT_CONFIG, LECTERN_SLOT_CONFIG]);
configHandler.read();

// Keybind for config screen
configKeybind = new KeyBind("Lectern Trading Config");
configKeybind.setKey("i");
configKeybind.setCallback(fun() {
    Player.get().openScreen(configHandler.createScreen(Text.of("Lectern Trading Config")));
});

client = MinecraftClient.getClient();
player = Player.get();
world = client.getWorld();

IS_RUNNING = false;

// Find lectern and select it
fun getLectern() {
    lecternSlot = LECTERN_SLOT_CONFIG.getValue() - 1;
    player.setSelectedSlot(lecternSlot);

    if (player.getItemForSlot(36 + lecternSlot).getId() != "lectern") {
        if (player.getSlotFor(Material.LECTERN.asItemStack()) != null) {
            player.swapSlots(player.getSlotFor(Material.LECTERN.asItemStack()), 36 + lecternSlot);
        } else {
            print("No lectern available. Waintig 5 secondes...");
            // Leave the player 5 secondes to fetch the lectern that flew away, if they are not using carreful break
            sleep(5000);
        }
    } 
}

// Find best axe and select it
fun getAxe() {
    axeSlot = AXE_SLOT_CONFIG.getValue() - 1;

    player.setSelectedSlot(axeSlot);

    if (!MaterialUtils.getAxes().contains(Material.of(player.getItemForSlot(36 + axeSlot).getId()))) {
        tempAxeSlot = null;
        foreach( axe : MaterialUtils.getAxes() ) {
            if (player.getSlotFor(axe) != null)
                tempAxeSlot = player.getSlotFor(axe);
        }

        if (tempAxeSlot != null) {
            player.swapSlots(tempAxeSlot, 36 + axeSlot);
        } else {
            print("No axe available. Stopping script.");
            // Stop the script if there's no axe in the player inventory
            IS_RUNNING = false;
        }
    }
}

// Loop until lectern placed
fun placeBlock(lecternCoordinates) {
    while (IS_RUNNING) {
        if (world.getBlockAt(lecternCoordinates).getId() == "lectern") return true;
        
        getLectern();

        player.interactBlock(lecternCoordinates, "up", lecternCoordinates, false);
        sleep(100);
    }
}

// Break block, carefull break proof with player sneaking
fun breakBlock(lecternCoordinates) {
    sleep(100);
    getAxe();

    player.setSneaking(true);
    while (world.getBlockAt(lecternCoordinates).getId() == 'lectern'){
        player.updateBreakingBlock(lecternCoordinates);
        sleep(50);
    }
    player.setSneaking(false);
}

// Return the map of enchant mapped with level and price
fun getWantedEnchantsAsMap() {
    enchantList = {};
    foreach (string : ITEMS_CONFIG.getValue()) {
        item = string.replaceAll(" ", "").split(',');
        level = LEVEL_CONFIG.getValue();
        price = PRICE_CONFIG.getValue();

        // Use default level and price if not mentionned
        try {
            if (item[1] != null) level = item[1].toNumber();
            if (item[2] != null) price = item[2].toNumber();
        } catch(e) {}
        
        enchantList.putIfAbsent(item[0], [level, price]);
    }
    return enchantList;
}

// Return a list of string "enchant,level,price"
fun getWantedEnchantsFromMap(map) {
    enchantList = [];
    foreach (enchant : map) {
        enchantList.append(enchant + "," + map.get(enchant)[0] + "," + map.get(enchant)[1]);
    }
    return enchantList;
}

fun runTrade(villager) {
    wantedList = getWantedEnchantsAsMap();
    lecternCoordinates = stringToPos(LECTERN_COORDINATES_CONFIG.getValue());

    placeBlock(lecternCoordinates);

    // Loop until the Villager screen is open
    while (player.getCurrentScreen() == null || player.getCurrentScreen().getName() != "Merchant"){
        // this is to stop the process when using /lecternTrade stop while stuck in this loop
        // The player does not have anymore lectern, so the villager is jobless and can't be open
        // The player use /lecternTrade stop but is stuck is this loop
        if (!IS_RUNNING) return; 

        player.interactWithEntity(villager);
        sleep(100);
    }

    isWanted = false;
    index = player.getCurrentScreen().getIndexOfTradeItem(ItemStack.of(Material.ENCHANTED_BOOK));
    if (index == null){
        player.closeScreen();

        breakBlock(lecternCoordinates);
        sleep(100);

        return;
    } else {
        item = player.getCurrentScreen().getTradeItemForIndex(index);
        price = player.getCurrentScreen().getPriceForIndex(index);
        enchants = item.getEnchantments();

        foreach (key : enchants.getKeys()) {
            enchant = enchants.get(key);
            wanted = wantedList.get(key);   // Try to get the enchant in the list, return null if enchant isn't wanted

            if (wanted == null){
                isWanted = false;
                break;
            } else {print("Wanted -> " + key + " " + wanted.get(0) + " for " + wanted.get(1) + "E | Found -> " + key + " " + enchant + " for " + price + "E");}
            if (enchant >= wanted.get(0) && price <= wanted.get(1)){isWanted = true;break;} else {isWanted = false;}
        }
    }

    if (isWanted){
        print("Done");
        IS_RUNNING = false;
    } else {
        player.closeScreen();
        breakBlock(lecternCoordinates);
        sleep(100);
    }
}

fun stringToPos(string) {
    x, y, z = string.split(" ");
    return new Pos(x.toNumber(), y.toNumber(), z.toNumber());
}

fun posToString(pos) {
    return "" + pos.getX() + " " + pos.getY() + " " + pos.getZ();
}

commandSpawnable = {
    "name" : "lecternTrade",
    "subcommands" : {
        "setLectern" : {
            "<pos>" : {
                "" : fun(pos) {
                    LECTERN_COORDINATES_CONFIG.setValue(posToString(pos));
                    print("Lectern coordinates set to : " + pos);
                }
            }
        },
        "run" : {
            "" : fun() {
                if (len(LECTERN_COORDINATES_CONFIG.getValue()) > 0) {
                    IS_RUNNING = true;
                    print("Running...");
                } else {
                    print("You need to setup the lectern coordinates before running the script!");
                    print("Use /lecternTrade setLectern <pos>");
                }
                
            }
        },
        "stop" : {
            "" : fun() {
                IS_RUNNING = false;
                player.setSneaking(false); // If stopped at the wrong time the player might be still sneaking
                print("Stopping...");
            }
        },
        "addEnchant" : {
            "<enchant>" : {
                "" : fun(enchant) {
                    list = ITEMS_CONFIG.getValue();
                    list.append(enchant.replaceAll("minecraft:", "") + "," + LEVEL_CONFIG.getValue() + "," + PRICE_CONFIG.getValue());
                    ITEMS_CONFIG.setValue(list);
                    print("Added " + enchant.replaceAll("minecraft:", "") + " " + LEVEL_CONFIG.getValue() + " for " + PRICE_CONFIG.getValue() + " emeralds");
                },
                "<level>" : {
                    "" : fun(enchant, level) {
                        list = ITEMS_CONFIG.getValue();
                        list.append(enchant.replaceAll("minecraft:", "") + "," + level+ "," + PRICE_CONFIG.getValue());
                        ITEMS_CONFIG.setValue(list);
                        print("Added " + enchant.replaceAll("minecraft:", "") + " " + level + " for " + PRICE_CONFIG.getValue() + " emeralds");
                    },
                    "<price>" : {
                        "" : fun(enchant, level, price) {
                            list = ITEMS_CONFIG.getValue();
                            list.append(enchant.replaceAll("minecraft:", "") + "," + level + "," + price);
                            ITEMS_CONFIG.setValue(list);
                            print("Added " + enchant.replaceAll("minecraft:", "") + " " + level + " for " + price + " emeralds");
                        }
                    }
                }
            },
            "help" : {
                "" : fun() {
                    print("/lecternTrade addEnchant <enchant> <level> <price>");
                }
            }
        },
        "removeEnchant" : {
            "<removeEnchant>" : {
                "" : fun(removeEnchant) {
                    map = getWantedEnchantsAsMap();
                    map.remove(removeEnchant);
                    ITEMS_CONFIG.setValue(getWantedEnchantsFromMap(map));
                    print("Removed " + removeEnchant + " from the wanted list");
                }
            }
        }
    },
    "arguments" : {
        "pos" : {"type" : "BlockPos"},
        "enchant" : {"type" : "EnchantmentId"},
        "level" : {"type" : "Integer"},
        "price" : {"type" : "Integer"},
        "removeEnchant" : {
            "type" : "GreedyString",
            "suggester" : fun(args...) {
                return getWantedEnchantsAsMap().getKeys();
            }
        }
    }
};

client.addCommand(CommandBuilder.fromMap(commandSpawnable));

while (true) {
    if (IS_RUNNING) {
        entity = player.getLookingAtEntity();
        if (entity != null && entity.getId() == "villager") {
            runTrade(entity);
        }
    }
    sleep(50);
}